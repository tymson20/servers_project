@startuml
class Product {
 + __init__(self, name: str, price: float): None
 + __eq__(self, other: Product): bool
 + __hash__(self): 
 + name: str
 + price: float
}

abstract class Server {
 + get_entries(self, n_letters: int): List[Product]
 - {abstract} get_products(self): List[Product]
 + {static} n_max_returned_entries: int
}

class ListServer {
 + __init__(self, products: List[Product]): None
 - get_products(self): List[Product]
 - products: List[Product]
}

class MapServer {
 + __init__(self, products: List[Product]): None
 - get_products(self): List[Product]
 - products: Dict[str: Product]
}

class Client {
 + __init__(self, server: Server): None
 + get_total_price(self, n_letters: Optional[int]): Optional[float]
 - server: Server
}


ListServer "1" *-- "*" Product
MapServer "1" *-- "*" Product
Server <|-- ListServer
Server <|-- MapServer
Client o-- Server
Server ..> TooManyProductsFoundError : << uses >>
Product ..> ValueError : << uses >>

hide empty members

@enduml